import numpy as np


def calc_spatial_corr(X):
    M, F, T = len(X), len(X[0]), len(X[0][0])
    m = np.arange(M)
    x = np.zeros((F, T, M), dtype="complex")
    for f in range(F):
        for t in range(T):
            x[f][t] = X[m, f, t]  # 転置はしていないことに注意
    R = np.zeros((F, M, M), dtype="complex")
    for f in range(F):
        for t in range(T):
            R[f] += np.dot(x[f][t].reshape(M, 1), x[f][t].reshape(1, M).conj())  # xftを転置したものと共役なものの積
    R = R / T
    return R


if __name__ == "__main__":
    X = np.array(
        [
            [
                [1.0 + 0.0j, 0.0 - 1.0j, -1.0 + 0.0j, 0.0 + 1.0j],
                [2.0 + 0.0j, 0.0 - 2.0j, -2.0 + 0.0j, 0.0 + 2.0j],
                [3.0 + 0.0j, 0.0 - 3.0j, -3.0 + 0.0j, 0.0 + 3.0j],
            ],
            [
                [4.0 + 0.0j, 0.0 - 2.0j, 1.0 + 0.0j, 0.0 + 0.0j],
                [2.0 + 0.0j, 0.0 - 1.0j, 0.0 + 0.0j, 0.0 + 0.0j],
                [1.0 + 0.0j, 0.0 - 1.0j, 1.0 + 0.0j, 0.0 + 0.0j],
            ],
        ]
    )
    R = calc_spatial_corr(X)
    print(R)

    ##########手計算で確認##########

    """
    F=3, T=4
    x11=[1,4]^T, x12=[-j,-2j]^T, x13=[-1,1]^T, x14=[j,0]^T
    x21=[2,2]^T, x22=[-2j,-j]^T, x23=[-2,0]^T, x24=[2j,0]^T
    x31=[3,1]^T, x32=[-3j,-j]^T, x33=[-3,1]^T, x34=[3j,0]^T
    TR1=[1,4]^T*[1,4]+[-j,-2j]^T*[j,2j]+[-1,1]^T*[-1,1]+[j,0]^T*[-j,0]
    =[[1,4],[4,16]]+[[1,2],[2,4]]+[[1,-1],[-1,1]]+[[1,0],[0,0]]=[[4,5],[5,21]]
    TR2=[2,2]^T*[2,2]+[-2j,-j]^T*[2j,j]+[-2,0]^T*[-2,0]+[2j,0]^T*[-2j,0]
    =[[4,4],[4,4]]+[[4,2],[2,1]]+[[4,0],[0,0]]+[[4,0],[0,0]]=[[16,6],[6,5]]
    TR3=[3,1]^T*[3,1]+[-3j,-j]^T*[3j,j]+[-3,1]^T*[-3,1]+[3j,0]^T*[-3j,0]
    =[[9,3],[3,1]]+[[9,3],[3,1]]+[[9,-3],[-3,1]]+[[9,0],[0,0]]=[[36,3],[3,3]]
    R1=[[1,1.25],[1.25,5.25]]
    R2=[[4,1.5],[1.5,1.25]]
    R3=[[9,0.75],[0.75,0.75]]
    """
